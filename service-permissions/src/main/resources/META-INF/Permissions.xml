<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="Permissions">

    <!-- Use type aliases to avoid typing the full classname every time. -->
    <typeAlias alias="Permissions" type="fi.mml.portti.domain.permissions.Permissions" />

    <resultMap id="permissionsResult" class="HashMap">
        <result property="id" column="id" />
        <result property="resourceMapping" column="resource_mapping" />
        <result property="resourceType" column="resource_type" />
        <result property="externalId" column="external_id" />
        <result property="externalIdType" column="external_type" />
        <result property="permissions" column="permission" />
    </resultMap>
        
    <resultMap id="resourcesWithGrantedPermissionsResult" class="HashMap">
        <result property="resourceMapping" column="resource_mapping" />
    </resultMap>

    <!-- vanhentunut -->
    <parameterMap id="resourceUserIdAndPermissionsTypeParam" class="Map">
        <parameter property="resourceUserId" />
        <parameter property="permissionsType" />
    </parameterMap>


    <!-- fixed -->
    <parameterMap id="resourcesWithGrantedPermissionsParam" class="Map">
        <parameter property="resourceType" />
        <parameter property="externalId" />
        <parameter property="externalType"/>
        <parameter property="permission"/>
    </parameterMap>

    
    <parameterMap id="permissionsOfResourceParam" class="Map">
        <parameter property="resourceName" />
        <parameter property="resourceNamespace" />
        <parameter property="resourceType" />
        <parameter property="externalIdType"/>
    </parameterMap>
    
    <parameterMap id="deletePermissionsParam" class="Map">
        <parameter property="resourceName" />
        <parameter property="resourceNamespace" />
        <parameter property="resourceType" />
        <parameter property="externalId" />
        <parameter property="externalIdType" />
        <parameter property="permissionsType"/>
    </parameterMap>

    <!-- vanhentunut -->
    <parameterMap id="resourceUserParam" class="Map">
        <parameter property="resourceName" />
        <parameter property="resourceNamespace" />
        <parameter property="resourceType" />
        <parameter property="externalId" />
        <parameter property="externalIdType" />
    </parameterMap>

    <parameterMap id="resourceParam" class="Map">
        <parameter property="resourceType" />
        <parameter property="resourceMapping" />
    </parameterMap>

   
    <parameterMap id="externalIdsAndLayerId" class="Map">
        <parameter property="idList" />
        <parameter property="id" />
    </parameterMap>
    
    <parameterMap id="externalIds" class="Map">
        <parameter property="idList" />
    </parameterMap>
   
    
    <resultMap id="publishPermissionsList" class="HashMap">
        <result property="resourceMapping" />
        <result property="externalId" />
    </resultMap>
    
   
    
    
    <parameterMap id="publishPermissionsList3" class="HashMap">
        <parameter property="resourceType" />
    </parameterMap>

    <parameterMap id="mapping_id" class="HashMap">
        <parameter property="resourceMapping" />
        <parameter property="externalId" />
    </parameterMap>
    
    <select id="maxId" resultClass="int">
        select max(id) from oskari_resource
    </select>


<!-- uudet mappaukset -->
    <parameterMap id="resourceMap" class="HashMap">
        <parameter property="resourceMapping" />
        <parameter property="resourceType" />
    </parameterMap>

    <parameterMap id="permissionMap" class="HashMap">
        <parameter property="oskariResourceId" />
        <parameter property="externalType" />
        <parameter property="permission" />
        <parameter property="externalId" />
    </parameterMap>

    <parameterMap id="layerPermissionResourceParams" class="Map">
        <parameter property="resourceMapping" />
        <parameter property="externalId" />
        <parameter property="externalType" />
        <parameter property="permission" />
    </parameterMap>


    <!-- fixed -->
    <select id="findPublishPermissions"  resultMap="publishPermissionsList">
       select 
       	r.resource_mapping as resourceMapping,
       	p.external_id as externalId
       from 
       	oskari_resource r, oskari_permission p
 	   where r.id=p.oskari_resource_id
 	   	and p.permission = 'PUBLISH'
 	   	and p.external_type = 'ROLE'
    </select>


    <select id="findEditPermissions"  resultMap="publishPermissionsList">
        select
        r.resource_mapping as resourceMapping,
        p.external_id as externalId
        from
        oskari_resource r, oskari_permission p
        where r.id=p.oskari_resource_id
        and p.permission = 'EDIT_LAYER'
        and p.external_type = 'ROLE'
    </select>
    
    
    <!-- fixed -->
    <select id="findResource" resultClass="int" parameterMap="resourceParam">
        select id
        from oskari_resource
        where resource_type=?
        and resource_mapping=?
        limit 1
    </select>


    <select id="findPermission" resultClass="int" parameterMap="permissionMap">
        select
            id
        from
            oskari_permission
        where
            oskari_resource_id = ?
            and external_type = ?
            and permission = ?
            and external_id = ?
        limit 1
    </select>


    <!-- fixed -->
    <select id="findResourcesWithGrantedPermissions" resultMap="resourcesWithGrantedPermissionsResult" parameterMap="resourcesWithGrantedPermissionsParam">
        select r.resource_mapping
        from oskari_resource r, oskari_permission p
        where r.id=p.oskari_resource_id
        and (r.resource_type = 'wfs_layer'
        or   r.resource_type=? )
        and p.external_id=?
        and p.external_type=?
        and p.permission=?
    </select>

    <!--  fixed -->
    <select id="findPermissionsOfResource" resultMap="permissionsResult" parameterMap="permissionsOfResourceParam">
        select r.id as id, r.resource_mapping  as resource_mapping,
        r.resource_type as resource_type, p.external_id as externalId, p.external_type as externalType,
        p.permission as permission
        from oskari_resource r, oskari_permission p
        where r.id=p.oskari_resource_id
        and r.resource_mapping=?
        and (r.resource_type = 'wfs_layer'
        or   r.resource_type=? )
        and p.external_type=?
    </select>
    <!-- check -->
    <select id="findPermissionsOfResourceUser" resultMap="permissionsResult" parameterMap="resourceUserParam">
        select r.id as id, r.resource_mapping  as resource_mapping,
        r.resource_type as resource_type, p.external_id as externalId, p.external_type as externalType,
        p.permission as permission
        from oskari_resource r, oskari_permission p
        where r.id=p.oskari_resource_id
        and r.resource_mapping=?
        nd (r.resource_type = 'wfs_layer'
        or   r.resource_type=? )
        and p.external_id=?
        and p.external_type=?
    </select>
    
    <parameterMap id="layerPermissionParams" class="Map">
        <parameter property="permissionType" /> <!--  javaType="java.lang.String" -->
        <parameter property="idList" /> <!--  javaType="java.util.List" -->
    </parameterMap>

    <!-- fixed -->
    <resultMap id="layerPermissionsResult" class="HashMap">
        <result property="layerId" column="layerId" />
        <result property="externalId" column="externalId" />
        <result property="externalType" column="externalType" />
        <result property="permission" column="permission" />
    </resultMap>

    <!-- fixed -->
    <select id="findPermissionsForLayerIdList" resultMap="layerPermissionsResult" parameterMap="layerPermissionParams">
        SELECT
            l.id as layerId,
            p.external_id as externalId,
            p.external_type as externalType,
            p.permission
      FROM
            oskari_resource u,
            oskari_permission p,
            portti_maplayer l 
      WHERE
            u.id = p.oskari_resource_id AND
            u.resource_mapping = l.wmsurl || '+' || l.wmsname
            <isNotEmpty property="permissionsType">AND p.permission = #permissionType#</isNotEmpty>
            <isNotEmpty property="idList" prepend="and">
                l.id in
                <iterate open="(" close=")" conjunction="," property="idList" >
                    #idList[]#
                </iterate>
            </isNotEmpty>
      ORDER BY 
            l.id;
    </select>

    <!-- fixed -->
    <select id="findPermissionsForBaseLayerIdList" resultMap="layerPermissionsResult" parameterMap="layerPermissionParams">
        SELECT 
            l.id as layerId, 
            p.external_id as externalId,
            p.external_type as externalType,
            p.permission
      FROM 
            oskari_resource u,
            oskari_permission p,
            portti_layerclass l 
      WHERE
            u.id = p.oskari_resource_id AND
            u.resource_mapping = 'BASE+' || CAST(l.id AS character varying)
            <isNotEmpty property="permissionType">AND p.permission = #permissionType#</isNotEmpty>
            <isNotEmpty property="idList" prepend="and">
                l.id in
                <iterate open="(" close=")" conjunction="," property="idList" >
                    #idList[]#
                </iterate>
            </isNotEmpty>
      ORDER BY
            l.id;
    </select>

    <!--   vanhentunut -->
    <statement id="insert" parameterClass="Permissions" resultClass="int">
        insert into portti_resource_user (resource_name, resource_namespace, resource_type, externalid, externalid_type)
        values (#uniqueResourceName.name#, #uniqueResourceName.namespace#, #uniqueResourceName.type#, #externalId#, #externalIdType#)
    </statement>

    <!-- uusi -->
    <statement id="insertResource" parameterMap="resourceMap" resultClass="int">
        insert into oskari_resource (resource_mapping, resource_type)
        values (?, ?)
    </statement>


    <!-- uusi -->
    <statement id="insertPermission" parameterMap="permissionMap">
        insert into oskari_permission (oskari_resource_id, external_type, permission, external_id) values (?, ?, ?, ?)
    </statement>

    <!-- uusi -->


    <statement id="findOskariResourceId"  parameterMap="layerPermissionResourceParams" resultClass="long">
        SELECT
            r.id
        FROM
            oskari_resource r,
            oskari_permission p
        WHERE
            r.id = p.oskari_resource_id AND
            r.resource_mapping = ? AND
            p.external_id = ? AND
            p.external_type = ? AND
            p.permission = ?
    </statement>


   <!--
    <statement id="deletePermissions" parameterMap="deletePermissionsParam">
        delete from portti_permissions where resource_user_id in
        (select id 
        from portti_resource_user 
        where resource_name=?
        and resource_namespace=?
        and resource_type=?
        and externalid=?
        and externalid_type=?) and permissions_type=?
    </statement>

                 -->

    <statement id="deletePermission" parameterClass="long" resultClass="long">
        delete from oskari_permission where oskari_resource_id = ?
    </statement>

        <!--
    <statement id="deleteResourceUsers" parameterMap="resourceUserParam">
        delete from portti_resource_user 
        where resource_name=?
        and resource_namespace=?        
        and resource_type=?
        and externalid=?
        and externalid_type=?
    </statement>

    -->

    <!-- fixed -->
    <select id="findMaplayerIdsForViewPermissionsByExternalIds" resultClass="HashMap" parameterMap="externalIds">
	    SELECT 
		    map.id
		FROM
            oskari_resource osr,
            oskari_permission op,
            portti_maplayer map
		WHERE
            op.permission = 'VIEW_LAYER' AND
            osr.id = op.oskari_resource_id AND
            osr.resource_type = 'maplayer' AND
            osr.resource_mapping = map.wmsurl || '+' || map.wmsname AND
            op.external_Id IN
		    <iterate open="(" close=")" conjunction="," property="idList" >
                    #idList[]#
            </iterate>
		    
		    
    </select>
    <!-- fixed -->
    <select id="hasViewPermissionForLayerByLayerId" resultClass="long" parameterMap="externalIdsAndLayerId">
        SELECT 
            map.id
        FROM 
            oskari_resource osr,
            oskari_permission op,
            portti_maplayer map
        WHERE
            op.permission = 'VIEW_LAYER' AND
            osr.id = op.oskari_resource_id AND
            osr.resource_type = 'maplayer' AND
            osr.resource_mapping = map.wmsurl || '+' || map.wmsname AND
            op.external_Id IN
            <iterate open="(" close=")" conjunction="," property="idList" >
                    #idList[]#
            </iterate> AND
            map.id = #id#
    </select>


    <!-- fixed -->
    <select id="hasEditPermissionForLayerByLayerId" resultClass="long" parameterMap="externalIdsAndLayerId">
        SELECT
        map.id
        FROM
        oskari_resource ore,
        oskari_permission op,
        portti_maplayer map
        WHERE
        op.permission = 'EDIT_LAYER' AND
        ore.id = op.oskari_resource_id AND
        ore.resource_type = 'maplayer' AND
        ore.resource_mapping = map.wmsurl || '+' || map.wmsname AND
        op.external_Id IN
        <iterate open="(" close=")" conjunction="," property="idList" >
            #idList[]#
        </iterate> AND
        map.id = #id#
    </select>


    <select id="hasExecutePermission" parameterMap="mapping_id">
    SELECT
        r.resource_mapping
    FROM
        oskari_resource r,
        oskari_permission p
    WHERE
        r.id = p.oskari_resource_id AND
        r.resource_mapping = 'generic-functionality' AND
        p.external_id IN
        <iterate open="(" close=")" conjunction="," property="idList" >
            #idList[]#
        </iterate> AND
        p.external_type = 'ROLE' AND
        p.permission = 'ADD_MAPLAYER'
    </select>
    
    
</sqlMap>